{"version":3,"sources":["logo.svg","Components/Button/index.js","Components/Card/index.js","Components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","enabled","console","log","nameUpdation","_this2","react_default","a","createElement","onClick","basket","Component","Card","images","fetch","then","data","json","setState","message","map","c","idt","key","src","Header","project","stateFixer","bind","assertThisInitialized","newName","Components_Button","Components_Card","App","className","Components_Header","name","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gRCyCzBC,qBAzBf,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAQ,GAHER,wEAQdS,QAAQC,IAAI,YACZP,KAAKJ,MAAMY,aAAa,uCAIpB,IAAAC,EAAAT,KAER,OACIU,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAKJ,EAAKK,WAA3B,oBAnBqBC,cCmCNC,cAtCf,SAAAA,EAAYpB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACdnB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,KAAMJ,KACDQ,MAAQ,CACTa,OAAS,IAHCpB,mFAQC,IAAAY,EAAAT,KAEfkB,MAlBW,6CAmBVC,KAAK,SAAAC,GACF,OAAOA,EAAKC,SAEfF,KAAK,SAAAC,GACFX,EAAKa,SAAS,CAACL,OAAQG,EAAKG,UAC5BjB,QAAQC,IAAIE,EAAKL,MAAMa,2CAO3BX,QAAQC,IAAI,YACZP,KAAKJ,MAAMY,aAAa,uCAK5B,OAEIR,KAAKI,MAAMa,OAAOO,IAAI,SAACC,EAAEC,GAAH,OAAShB,EAAAC,EAAAC,cAAA,OAAKe,IAAMD,EAAIE,IAAMH,aAlCrCV,aC8BJc,cA/Bf,SAAAA,IAAa,IAAAhC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACThC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,QACKI,MAAQ,CACT0B,QAAQ,UAEZjC,EAAKkC,WAAalC,EAAKkC,WAAWC,KAAhBlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAAD,KALTA,0EAQFqC,GACPlC,KAAKsB,SAAW,CACZQ,QAASI,GAAW,sDAO5B,OACIxB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,qBAAaZ,KAAKI,MAAM0B,SAExBpB,EAAAC,EAAAC,cAACuB,EAAD,CAAU3B,aAAgBR,KAAK+B,aAC/BrB,EAAAC,EAAAC,cAACwB,EAAD,cAxBqBrB,aCyBNsB,mLAtBX,OACE3B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACf5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAQC,KAAK,mBACX9B,EAAAC,EAAAC,cAAA,UAAQ0B,UAAU,cAChB5B,EAAAC,EAAAC,cAAA,OAAKgB,IAAKa,IAAMH,UAAU,WAAWI,IAAI,SACzChC,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,6BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACE0B,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBAVQ9B,aCME+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.19211b00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\"\n\nlet buttonClick = ()=>{\n    alert(\"yo yo\");\n}\n\nconst Welcome = (props) => {\n    return <h1>Hello, {props.name}</h1>;\n   }\n\n\n\nclass Button extends Component{\n\nconstructor(props){\n    super(props);\n    this.state = {\n        enabled:true\n    }\n}\n\nbasket(){\n    console.log(\"dickkkkk\");\n    this.props.nameUpdation(\"sc\")\n}\n\n\nrender(){\n   \nreturn(\n    <div>\n<button onClick={()=> this.basket()}> Change </button>\n</div>\n);\n}\n\n\n}\n\nexport default Button;","import React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\n\nlet endpoint = \"https://dog.ceo/api/breeds/image/random/6\"\n\n\nlet a=[1,2,3,4]\n\nclass Card extends Component{\n\n\nconstructor(props){\n    super(props);\n    this.state = {\n        images : []\n    }\n}\n\n\ncomponentDidMount(){\n\n    fetch(endpoint)\n    .then(data=>{\n        return data.json();\n    })\n    .then(data=>{\n        this.setState({images: data.message});\n        console.log(this.state.images)\n    });\n\n}\n\n\nbasket(){\n    console.log(\"dickkkkk\");\n    this.props.nameUpdation(\"sc\")\n}\n\n\nrender(){\nreturn(\n    // <h1>sd</h1>\n    this.state.images.map((c,idt)=><img key ={idt}src ={c}></img>)\n);\n}\n\n\n}\n\nexport default Card;","import React, {Component} from \"react\";\nimport Button from \"../Button\"\nimport ReactDOM from \"react-dom\";\nimport Card from \"../Card\";\n\nclass Header extends Component{\n\nconstructor(){\n    super();\n    this.state = {\n        project:\"Ayesha\"\n    }\n    this.stateFixer = this.stateFixer.bind(this);\n}\n\nstateFixer(newName){\n    this.setState ( {\n        project: newName || \"Shivam Thapliyal\"\n    });\n} \n\n  \nrender(){\n\nreturn(\n    <div>\n<h1>This is {this.state.project}</h1> \n\n<Button   nameUpdation = {this.stateFixer}/> \n<Card/>\n</div>\n);\n\n}\n\n\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Header from \"./Components/Header\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Header name=\"Tech Portfolio\"/>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/Apsdep.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}