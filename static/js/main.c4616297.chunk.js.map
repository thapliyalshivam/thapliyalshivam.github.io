{"version":3,"sources":["logo.svg","actions/index.js","Components/Card/index.js","Components/Header/index.js","Components/Gallery/index.js","App.js","serviceWorker.js","reducers/reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","updateCarousel","id","dispatch","getState","state","console","log","populate","images","filter","a","type","data","projects","Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","basket","_this2","map","c","idt","react_default","createElement","className","key","onClick","src","img","Component","connect","incr","mm","value","bindActionCreators","Header","project","stateFixer","bind","assertThisInitialized","newName","setState","Gallery","carousel","title","App","Components_Header","name","Components_Gallery","Components_Card","Boolean","window","location","hostname","match","inti_state","ctr","isMenuOn","heading","reducer","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4616297.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\n\n//import {connect} from 'react-redux';\nvar updateCarousel = (id) => (dispatch, getState) => {\n    const state = getState();\n    console.log(id);\n    const populate = state.images.filter(a=>a.id==id)[0];\n    console.log(populate);\n\n    dispatch({type:\"CAROUSELSET\",data:populate});\n  };\n  \n  export default updateCarousel;","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { connect } from 'react-redux';\nimport \"./style.css\";\nimport * as projects from '../../data/data.json';\nimport updateCarousel from '../../actions'\nimport { bindActionCreators } from \"../../../../../Library/Caches/typescript/3.4.3/node_modules/redux\";\nconsole.log(projects.data);\n\n\nlet endpoint = \"https://dog.ceo/api/breeds/image/random/6\"\n\n\nlet a = [1, 2, 3, 4]\n\nclass Card extends Component {\n\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    componentDidMount() {\n        this.props.populate(projects.data)\n    }\n\n\n    basket = (a) => {\n        console.log(a);\n    }\n\n\n    render() {\n        return (\n            // <h1>sd</h1>\n            this.props.images.map((c, idt) =>\n                <div className=\"fill\" key={c.id} onClick={() => this.props.updateCarousel(c.id)}>\n                    <img  src={c.img}></img>\n                    <h2 className=\"titles\"> Verola Patterns</h2>\n                    <h3 className=\"captions\"> An interactive art installation using nodejs for\n                        a realtime experience of the visuals.</h3>\n                </div>\n            )\n        );\n    }\n\n\n}\n\nconst mapStatetoProp = state => {\n    return {\n        images: state.images\n    };\n}\n\n\nconst dispatchtoProp = dispatch => {\n    return {\n        populate: (images) => {\n            dispatch({ type: \"DATAPOPULATE\", images: images })\n        },\n        incr: (mm) => {\n            console.log(\"sksnjnsjnsk\");\n            dispatch({ type: \"INCR\", value: mm })\n        },\n        updateCarousel: bindActionCreators(updateCarousel, dispatch)\n    };\n};\nexport default connect(mapStatetoProp, dispatchtoProp)(Card);","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nclass Header extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            project: \"project\"\n        }\n        this.stateFixer = this.stateFixer.bind(this);\n    }\n\n    stateFixer(newName) {\n        this.setState({\n            project: newName || \"Shivam Thapliyal\"\n        });\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                 <div className=\"header\">\n                    <h2>SHIVAM THAPLIYAL</h2>\n                </div> \n               \n            </div>\n        );\n\n    }\n\n\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport {connect} from 'react-redux';\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\n\nclass Gallery extends Component {\n\n\n    constructor(props) {\n        super(props);\n    }\n\n\n\n    render() {\n        return (<div>\n            (2==2?<p>{this.props.carousel.title}pixxa</p>:null)\n            <img src={this.props.carousel.img}/>\n            </div>\n        )\n    }\n\n\n}\n\nconst mapStateToProps = state =>{\n    return{\n        carousel:state.carousel\n    }\n}\n\nconst dispatchToProps = dispatch=>{\n    return{\n        incr:(mm)=>{\n            console.log(\"sksnjnsjnsk\");\n            dispatch({type:\"INCR\",value:mm})},\n    }\n}\n\n\n\n\nexport default connect(mapStateToProps,dispatchToProps)(Gallery);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Header from \"./Components/Header\";\nimport Card from './Components/Card';\nimport Gallery from './Components/Gallery';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n <Header name=\"Tech Portfolio\"/>\n      <Gallery/>\n      <div className=\"container\"><Card/> </div>\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst inti_state = { carousel:{},ctr: 11, isMenuOn: false, heading: \"new\", images:[] };\n\n\nconst reducer = (state = inti_state, action) => {\n\n    console.log(\"_______reducer________\");\n    \n    if (action.type === \"INCR\") {\n        return {\n            ...state, ctr: state.ctr + action.value\n        };\n    }\n\n    if (action.type === \"CAROUSELSET\") {\n        return {\n            ...state, carousel: action.data\n        };\n    }\n\n    if (action.type === \"DATAPOPULATE\") {\n        return {\n            ...state, \n            images: action.images\n        };\n    }\n\n    if (action.type === \"HEAD\") {\n        return {\n            ...state,\n            heading: action.value + \"nee\"\n        };\n    }\n\n    return state;\n};\n\n\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport {Provider} from 'react-redux';\nimport reducer from './reducers/reducer.js'\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}