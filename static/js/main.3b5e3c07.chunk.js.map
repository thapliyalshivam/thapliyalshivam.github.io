{"version":3,"sources":["logo.svg","actions/index.js","Components/Button/index.js","Components/Card/index.js","Components/Header/index.js","App.js","serviceWorker.js","reducers/reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","song","yo","boy","dispatch","getState","console","log","type","value","Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ctr","enabled","_this2","react_default","a","createElement","onClick","incr","Component","connect","mm","bindActionCreators","Card","images","fetch","then","data","json","setState","message","nameUpdation","map","c","idt","class","key","src","Header","project","stateFixer","bind","assertThisInitialized","newName","className","Components_Button","App","Components_Header","name","Components_Card","Boolean","window","location","hostname","match","inti_state","isMenuOn","reducer","arguments","length","undefined","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b5e3c07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\n\n//import {connect} from 'react-redux';\nvar song = (yo,boy) => (dispatch, getState) => {\n    console.log(\"sugar\")\n    dispatch({type:\"INCR\",value:2});\n  };\n  \n  export default song;","import React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {connect} from 'react-redux';\nimport \"./style.css\"\nimport song from './../../actions/index.js';\n\nimport { bindActionCreators } from 'redux';\n\nlet buttonClick = ()=>{\n    alert(\"yo yo\");\n}\n\nconst Welcome = (props) => {\n    return <h1>Hello, {props.name}</h1>;\n   }\n\n\n\n\nclass Button extends Component{\n\nconstructor(props){\n    super(props);\n    console.log(props.dispatch);\n    this.state = {\n        ctr:22,\n        enabled:true\n    }\n}\n\n\nrender(){\n\nreturn(\n    <div>\n    <button type=\"submit\" onClick={()=>this.props.song(2,33)}> {this.props.ctr} </button>\n<button type=\"submit\" onClick={()=>this.props.incr(1000)}> {this.props.ctr} </button>\n</div>\n);\n}\n\n\n}\n\n\nconst mapStatetoProp = state=>{\n    return{\n        ctr:state.ctr,\n    };\n};\n\nconst dispatchtoprop = dispatch=>{\n    return{\n        incr:(mm)=>{\n            console.log(\"sksnjnsjnsk\");\n            dispatch({type:\"INCR\",value:mm})},\n        song:bindActionCreators(song,dispatch) \n    };\n};\n\nexport default connect(mapStatetoProp,dispatchtoprop)(Button);\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\n\nlet endpoint = \"https://dog.ceo/api/breeds/image/random/6\"\n\n\nlet a = [1, 2, 3, 4]\n\nclass Card extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            images: []\n        }\n    }\n\n\n    componentDidMount() {\n\n        fetch(endpoint)\n            .then(data => {\n                return data.json();\n            })\n            .then(data => {\n                this.setState({ images: data.message });\n                console.log(this.state.images)\n            });\n\n    }\n\n\n    basket() {\n        console.log(\"dickkkkk\");\n        this.props.nameUpdation(\"sc\")\n    }\n\n\n    render() {\n        return (\n            // <h1>sd</h1>\n            this.state.images.map((c, idt) =>\n                <div class=\"fill\">\n                    <img key={idt} src={c}></img>\n                </div>\n            )\n        );\n    }\n\n\n}\n\nexport default Card;","import React, { Component } from \"react\";\nimport Button from \"../Button\"\nimport ReactDOM from \"react-dom\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nclass Header extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            project: \"project\"\n        }\n        this.stateFixer = this.stateFixer.bind(this);\n    }\n\n    stateFixer(newName) {\n        this.setState({\n            project: newName || \"Shivam Thapliyal\"\n        });\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <div className=\"header\">\n                    <h2>SHIVAM THAPLIYAL</h2>\n                </div>\n                <Button nameUpdation={this.stateFixer} />\n               \n            </div>\n        );\n\n    }\n\n\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Header from \"./Components/Header\"\nimport Card from './Components/Card';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Header name=\"Tech Portfolio\"/>\n      <div className=\"container\"><Card/> </div>\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst inti_state={ctr:11,isMenuOn:false};\n\n\nconst reducer = (state = inti_state,action)=>{\n\nconsole.log(\"dammm\");\n    if(action.type===\"INCR\"){\n    return{ctr:state.ctr+action.value};}\n    return state;\n    };\n    \nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport {Provider} from 'react-redux';\nimport reducer from './reducers/reducer.js'\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}